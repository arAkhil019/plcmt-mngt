rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper functions
    function isAuthenticated() {
      return request.auth != null;
    }
    
    function isAdmin() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'admin';
    }
    
    function isPlacementCoordinator() {
      return isAuthenticated() && 
             get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role == 'placement_coordinator';
    }

    // Users collection
    match /users/{userId} {
      // Read permissions
      allow read: if isAuthenticated() && (
        // Users can read their own profile
        userId == request.auth.uid ||
        // Or read other active users for permission assignments
        resource.data.isActive == true
      );
      
      // Allow querying users by email for login validation (before authentication)
      // This is needed for the loginWithEmailPassword function to check user existence
      allow list: if true;
      
      // Write permissions
      allow create: if (
        // Admin can create any user
        isAdmin() ||
        // Allow self-registration for the specific admin email
        (userId == request.auth.uid && 
         request.auth.token.email == 'cbitplacementtraker@gmail.com') ||
        // Allow self-registration for any authenticated user (they'll get coordinator role by default)
        (userId == request.auth.uid && isAuthenticated())
      ) && 
      request.resource.data.keys().hasAll(['name', 'email', 'role', 'isActive', 'createdAt']) &&
      request.resource.data.createdAt == request.time;
      
      allow update: if isAdmin() || 
                    (userId == request.auth.uid && 
                     // Users can update their own name, lastLogin, and password setup related fields
                     request.resource.data.diff(resource.data).affectedKeys().hasOnly(['name', 'lastLogin', 'hasPasswordAuth', 'passwordSetupDate', 'isFirstLogin']));
      
      allow delete: if isAdmin();
    }

    // Activities collection
    match /activities/{activityId} {
      // Read permissions - ALL authenticated users can view all activities
      allow read: if request.auth != null;
      
      // Create permissions
      allow create: if request.auth != null && 
                    (isAdmin() || isPlacementCoordinator()) && 
                    request.resource.data.keys().hasAll(['companyName', 'activityType', 'date', 'mode', 'createdBy', 'createdAt']) &&
                    request.resource.data.createdBy == request.auth.uid &&
                    request.resource.data.createdAt == request.time;
      
      // Update permissions - Limited based on role and operation type
      allow update: if request.auth != null && (
        // Admin can update any activity
        isAdmin() ||
        // Activity creator can update their activities
        resource.data.createdBy == request.auth.uid ||
        // Assigned attendance markers can ONLY update attendance-related fields
        (request.auth.uid in resource.data.get('attendanceMarkers', []) &&
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['students', 'updatedAt']) &&
         // Ensure only attendance status is being modified, not student data structure
         request.resource.data.students.size() == resource.data.students.size())
      );
      
      // Delete permissions
      allow delete: if isAdmin() || resource.data.createdBy == request.auth.uid;
    }

    // Activity Logs collection
    match /activityLogs/{logId} {
      // Read permissions
      allow read: if isAuthenticated() && (
        // Admin can read all logs
        isAdmin() ||
        // Users can read their own logs
        resource.data.userId == request.auth.uid
      );
      
      // Create permissions - users can log their own actions
      allow create: if isAuthenticated() && 
                    request.resource.data.keys().hasAll(['userId', 'userName', 'userEmail', 'action', 'description', 'timestamp']) &&
                    request.resource.data.userId == request.auth.uid &&
                    request.resource.data.timestamp == request.time &&
                    // Allow additional optional fields for enhanced logging
                    request.resource.data.keys().hasOnly(['userId', 'userName', 'userEmail', 'action', 'description', 'timestamp', 'metadata', 'ipAddress', 'userAgent', 'clientTimezone']);
      
      // Update permissions - logs are immutable for audit purposes
      allow update: if false;
      
      // Delete permissions - only admin for emergency cleanup
      allow delete: if isAdmin();
    }

    // Pre-approved Users collection
    match /preApprovedUsers/{emailId} {
      // Read permissions - allow authenticated users to read pre-approval collection
      // Since we can't easily replicate complex string replacement in rules,
      // we'll allow broader read access for authenticated users to check pre-approval
      allow read: if isAuthenticated();
      
      // Create permissions - only admin can add pre-approved emails
      allow create: if isAdmin() && 
                    request.resource.data.keys().hasAll(['email', 'addedAt', 'addedBy']) &&
                    request.resource.data.addedAt == request.time;
      
      // Update permissions - only admin can update pre-approved emails
      allow update: if isAdmin();
      
      // Delete permissions - only admin can remove pre-approved emails
      allow delete: if isAdmin();
    }

    // Student collections - department-wise (students_*)
    match /{path=**} {
      // Student collections pattern: students_computer_science_engineering, etc.
      allow read, write: if isAdmin() && 
                         request.auth != null && 
                         resource != null;
    }

    // Default rule for any other collections
    match /{document=**} {
      allow read: if isAuthenticated();
      allow write: if isAdmin();
    }
  }
}